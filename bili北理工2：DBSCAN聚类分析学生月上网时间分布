'''
课件和数据地址：https://github.com/caiiiac/Machine-Learning-with-Python

DBSCAN算法的流程
1.将所有点标记为核心点、边界点或噪声点；
2.删除噪声点；
3.为距离在Eps之内的所有核心点之间赋予一条边；
4.每组连通的核心点形成一个簇；
5.将每个边界点指派到一个与之关联的核心点的簇中（哪一个核心点的半径范围之内）。

dbscan主要参数：
eps：两个样本被认为是邻居的最大距离。
min_samples：簇的样本数，即邻居达到这个数才被认为是核心点。
metric：距离计算方式。

'''


import numpy as np,pickle,time,pandas as pd
from sklearn import datasets,metrics
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split,cross_val_score
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans,DBSCAN
#from collections import Counter



a=pd.read_csv('2.txt',sep=',',header=None)
#mac=a.loc[:,2].tolist()



#上网时长，从Dataframe转np.array后转数字，不然可能无法聚类分析（因为文本可能不能比较大小）
onlinetime=a.loc[:,6].values.astype(int).reshape(-1,1)

#开始上网时间，先空格隔离取索引1去掉日期，然后:隔离取小时数，即几点开始上网
starttime=a.loc[:,4].apply(lambda i:i.split(' ')[1].split(':')[0])

#.value时候pd转np，然后取int，然后reshape成dbscan需要的shape
starttime=starttime.values.astype(int).reshape(-1,1)



def f(xx=starttime,eps=.01,ms=20):
    db=DBSCAN(eps=eps,min_samples=ms).fit(xx)                 #训练
    labels=db.labels_                                          #获取标签

    raito=labels[labels==-1].size/labels.size                     #计算噪音点的比例
    
    
    #噪音点的标签是-1，减去噪音点的1就是聚类的数量
    n_clusters=np.unique(labels).size-(1 if -1 in labels else 0)   
    
    print(labels,'raito:',raito,'n_clusters:',n_clusters)
    print(metrics.silhouette_score(xx,labels))

    
    #原代码是range(n_clusters)，因为只需要聚类的信息，我写-1是为了查看包括噪音在内的所有分类
    for i in range(-1,n_clusters):        
        count=xx[labels==i].size
        mean=np.mean(xx[labels==i])
        print('类{}元素有，'.format(i),xx[labels==i].ravel())
        print('数量是{}，平均值是{}'.format(count,mean))


    #有时候画直方图，xx的属性是乱的（按xx里的顺序，而不是0到23的属性），下面两行是为了排序
    #xx=xx.ravel()
    #xx.sort()

    
    plt.subplot(1,2,1)
    plt.hist(xx,24)        
    print(xx.ravel())
    xx=np.log10(xx)
    #这里是每个数据特别多时，图片展示效果不好，可以取对数后展示，不过0对应对数是无穷大（inf），所以要额外处理
    xx[np.isinf(xx)]=0
    plt.subplot(1,2,2)
    plt.hist(xx,24)

    plt.show()
    
f()                                           #对上网开始时间使用dbscan
f(onlinetime,2000,5)                           #对上网时长使用dbscan
